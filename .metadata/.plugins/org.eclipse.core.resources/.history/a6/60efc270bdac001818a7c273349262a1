/*
	===== 동기화(synchronized) =====
	--> 공유된하나의 특정메소드를 여러 스레드들이 순차적으로 줄을서서 실행하는 것
	
	 여러 스레드가 하나의 데이터를 공유할 수 있다.
	 공유 메커니즘은 성능 및 자원의 효율성에서는 좋지만 데이터 일관성에 있어서는 문제가 발생될 수 있다.
	 여러 스레드가 하나의 데이터를 공유할때 하나의 스레드가 해야하는 작업이 끝날때 까지 
	 그 데이터는 다른 스레드에게 공유되지 않도록 해야 하는데, 
	 이것을 해결하는 방법으로 자바에서는 synchronized 키워드를 사용하여 해결한다.
	 
	==== >>> 동기화(synchronized)를 처리하는 2가지 방법 <<< ====
	
	1. 동기화 메소드를 사용하는 방법
	   
	   접근지정자  synchronized  리턴타입  메소드명() {
	    .......
	    .......
	  }
	 
	  --> 메소드 선언시 synchronized 키워드를 지정하는 방법이다. 
	    이 방법은 메소드내의 모든 코드가 동기화된다.
	    따라서 특정 스레드가 이 메소드의 모든 내용을 모두 수행할 때까지 다른 스레드는 block 된다.
	  
	  
	2. 동기화 블럭을 사용하는 방법 (추천)
	   
	   접근지정자  리턴타입  메소드명() {
	      .......
	    synchronized(공유객체) {
	      .......
	    }
	      .......
	  } 
	   
	 --> 메소드내에서 synchronized 키워드 블럭을 사용하는 것이다. 
	         이 방법은 메소드내의 모든 코드가 아닌 synchronized 블럭만 동기화 된다. 
	         따라서 전체 메소드를 동기화하는 방법보다 더 효율적이다.
	 
	동일한 클래스의 같은 메소드를 동시에 여러 스레드가 호출해도 
	synchronized(동기화)에 의하여 순차적으로 스레드들이 실행된다.
	예를 들어, 동일한 통장계좌에 잔액이 100만원이 있을때 
	남편과 아내가 동시에 입금하는 스레드와 출금하는 스레드를 여러번 동시에 실행시켰을 경우
	통장계좌에 입금과 출금 처리가 순차적으로 실행을 해서 기록을 해야 되는데, 
	그렇지 않은 경우 입출금 스레드의 실행순서를 우리가 알수가 없으므로
	통장계좌에 입금과 출금 처리가 이상하게 기록 될 수 있게 된다.             
*/

package my.day19.sub6;
//=============================== 공유데이터 클래스 : 메소드에 동기화 처리를 한 경우 =================================

/*
	이번에는 항상 입금이 먼저 시작되고 그다음에 출금, 또 다음에 입금이 되고 그 다음에 출금,
	항상 이런식으로 입금 -> 출금 -> 입금 -> 출금 ... 이렇게 되도록 한다.
*/

public class SyncBankbook {
	
	private String account;		//통장 계좌번호
	private long balance; 		//잔고액
	
	private boolean boolDeposit = true;
	//입금을 먼저하기 위해 초기치를 true로 줌.
	//boolDeposit 값이 true 이어야만 입금메소드 deposit(long money)가 작동되도록 한다.
	
	private boolean boolWithdraw = false;
	//출금을 먼저 입금이 된 이후에 하기 위해 초기치를 false로 줌.
	//boolWithdraw 값이 true 이어야만 출금메소드 withdraw(long money)가 작동되도록 한다.
	
	public SyncBankbook() {}
	
	public SyncBankbook(String account, long balbance) {
		this.account = account;
		this.balance = balbance;
	}
	
	

	public String getAccount() {
		return account;
	}
	public void setAccount(String account) {
		this.account = account;
	}
	public long getBalance() {
		return balance;
	}
	public void setBalance(long balbance) {
		this.balance = balbance;
	}
	
	
	
	
	
	
	// ============================= 동기화 처리를 한 입금 메소드 ================================ //
	     // 이거이거이거이거 //
	public synchronized void deposit (long money) {
		
		while(boolDeposit == false) {
	      // boolDeposit 의 값이 true 이어야만 입금메소드 deposit(long money)이 정상작동 하도록 한다.
	      // boolDeposit 의 값이 false 이면 입금메소드 deposit(long money)는 계속해서 wait() 상태로 빠지게 만든다. 
			
		   try{
		     	 wait(); // void java.lang.Object.wait() throws InterruptedException
			     /* 
    		        wait()가 호출되면 스레드는 수행 권한을 포기한다.
			                 이때 모니터 락을 반납한다. 그런 뒤 대기상태(waiting Pool)로 들어가는데 
			                 다른 스레드가 notify(); 해줄때까지 대기상태(waiting Pool)로 들어간다.             
			     */
		     	 
		      }catch(InterruptedException e){
		    	  
		      }
		   
	    }// end of while----------------------------------
		
		System.out.println("=== 입금업무시작 ===");
		//돈을 넣어주면 기존잔액에 입금액만큼더해 ..입금처리하는거
		balance += money;
		System.out.println("계좌번호 : "+account+ " 입금액 => "+money+", 입금후 잔액 =>"+balance);
		
		boolDeposit = false; //입금금지
		//입금을 한번 하고 출금한번하고 반복되게 할려고 한번 메소드를 수행하면 입금금지를해줘 
		//다른 스레드가 notify(); 해줄때 까지
		
		boolWithdraw = true; //출금허락
		//입금메소드에 출금허락을 하기 때문에 무조건 입금을 먼저한다음에 출금이 가능하게 해준다.
		
		notify();
		/*
		 	대기실(waiting Pool)에 대기(wait)하고 있는 스레드 아무나 하나를 골라서  깨운다.
		 	이어서 깨운 스레드를 Runnable(실행준비상태 실행되는거 아니다)한 상태로 전환시켜준다.
		*/
		System.out.println("=== 입금업무완료 ===\n");
		
	}//동기화 처리를 한 입금 메소드----------------------------------------------------------------------
	
	
	
	
	
	// ============================= 동기화 처리를 한 출금 메소드 ============================= //
	public synchronized void withdraw(long money) {
		
		//boolWithdraw 초기치를 false로 했어 그래서 입금을 하기전까지 출금을 할 수 없어
		//처음부터 대기상태(waiting Pool)상태에 들어가 있어
		
		while(boolWithdraw == false){ 
	      // boolWithdraw 의 값이 true 이어야만 출금메소드 withdraw(long money)이 정상작동 하도록 한다.
	      // boolWithdraw 의 값이 false 이면 출금메소드 withdraw(long money)는 계속해서 wait() 상태로 빠지게 만든다. 
			
		   try{
		     	 wait(); // void java.lang.Object.wait() throws InterruptedException
		     	/* 
				    wait()가 호출되면 스레드는 수행 권한을 포기한다.
			                 이때 모니터 락을 반납한다. 그런 뒤 대기상태(waiting Pool)로 들어가는데 
			                 다른 스레드가 notify(); 해줄때까지 대기상태(waiting Pool)로 들어간다.             
			     */
		     	 
		      }catch(InterruptedException e){
		    	  
		      }
	    }// end of while----------------------------------

		
		//기존잔액이 출금하려는 잔액보다 작으면 안돼
		if(balance - money < 0) {
			System.out.println("=== 출금업무시작 ===");
			System.out.println("계좌번호 : " +account+ " 잔액부족! 현재금액 => "+balance+", 출금요청금액 =>"+money);
			
			boolWithdraw = false;  //출금금지(잔액부족이니까 출금이 안되지)
			boolDeposit = true;    //입금허락
			
			notify();
			/*
			 	대기실(waiting Pool)에 대기(wait)하고 있는 스레드 아무나 하나를 골라서  깨운다.
			 	이어서 깨운 스레드를 Runnable(실행준비상태 실행되는거 아니다)한 상태로 전환시켜준다.	
			*/
			System.out.println("=== 출금업무완료 ===\n");
			
			return;//메소드가 종료되니까 여기서 끝나 else 안써도되지 
			
		}//end of if-------------------------
		
		System.out.println("=== 출금업무시작 ===");
		balance -= money;//출금
		System.out.println("계좌번호 : "+account+ " 출금액 => "+money+", 출금후 잔액 =>"+balance);
		
		boolWithdraw = false;  // 출금금지
		boolDeposit = true;    //입금허락
		
		notify();
		System.out.println("=== 출금업무완료 ===\n");
		
		
	}//동기화 처리를 한 출금 메소드------------------------------------------------
	
	
	
	
	
	
	
}
